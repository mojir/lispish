import type { DatatypeName } from './api'
import type { DatatypeReference } from '.'

export const datatype: Record<DatatypeName, DatatypeReference> = {
  _type_number: {
    datatype: true,
    clojureDocs: null,
    title: 'number',
    category: 'Datatype',
    linkName: '_type_number',
    description: 'A number',
    examples: [
      '42',
      '3.14',
    ],
  },
  _type_string: {
    datatype: true,
    clojureDocs: null,
    title: 'string',
    category: 'Datatype',
    linkName: '_type_string',
    description: 'A string',
    examples: [
      '"hello"',
      '""',
    ],
  },
  _type_object: {
    datatype: true,
    clojureDocs: null,
    title: 'object',
    category: 'Datatype',
    linkName: '_type_object',
    description: 'An object, a collection of key-value pairs where keys are strings',
    examples: [
      '{}',
      '{:a 1 :b 2}',
    ],
  },
  _type_array: {
    datatype: true,
    clojureDocs: null,
    title: 'array',
    category: 'Datatype',
    linkName: '_type_array',
    description: 'An array, a collection of values',
    examples: [
      '[]',
      '[1 2 3]',
      '[:a nil true]',
    ],
  },
  _type_boolean: {
    datatype: true,
    clojureDocs: null,
    title: 'boolean',
    category: 'Datatype',
    linkName: '_type_boolean',
    description: 'A boolean',
    examples: [
      'true',
      'false',
    ],
  },
  _type_function: {
    datatype: true,
    clojureDocs: null,
    title: 'function',
    category: 'Datatype',
    linkName: '_type_function',
    description: 'A function',
    examples: [
      '(fn [x] (+ x 1))',
      '(fn [] 42)',
      '#(+ %1 %2)',
    ],
  },
  _type_integer: {
    datatype: true,
    clojureDocs: null,
    title: 'integer',
    category: 'Datatype',
    linkName: '_type_integer',
    description: 'An integer',
    examples: [
      '42',
      '-42',
    ],
  },
  _type_any: {
    datatype: true,
    clojureDocs: null,
    title: 'any',
    category: 'Datatype',
    linkName: '_type_any',
    description: 'Any value',
    examples: [
      '42',
      '"hello"',
      'true',
      'nil',
    ],
  },
  _type_nil: {
    datatype: true,
    clojureDocs: null,
    title: 'nil',
    category: 'Datatype',
    linkName: '_type_nil',
    description: 'The value nil',
    examples: [
      'nil',
    ],
  },
  _type_collection: {
    datatype: true,
    clojureDocs: null,
    title: 'collection',
    category: 'Datatype',
    linkName: '_type_collection',
    description: 'A collection, an object, an array or a string',
    examples: [
      '{:foo 42}',
      '[1, 2, 3]',
      '"hello"',
    ],
  },
  _type_sequence: {
    datatype: true,
    clojureDocs: null,
    title: 'sequence',
    category: 'Datatype',
    linkName: '_type_sequence',
    description: 'A sequence, an array or a string',
    examples: [
      '[1 2 3]',
      '"hello"',
    ],
  },
  _type_regexp: {
    datatype: true,
    clojureDocs: null,
    title: 'regexp',
    category: 'Datatype',
    linkName: '_type_regexp',
    description: 'A regular expression',
    examples: [
      '(regexp "^\\s*(.*)$")',
      '#"albert"ig',
    ],
  },
  _type_never: {
    datatype: true,
    clojureDocs: null,
    title: 'never',
    category: 'Datatype',
    linkName: '_type_never',
    description: 'A value that can never be created',
    examples: [
      '(throw "error")',
    ],
  },
}
